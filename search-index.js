var searchIndex = JSON.parse('{\
"compile":{"doc":"","t":[3,12,12,12,5,5,11,11,11,11,11,11,11,11,11],"n":["Args","file_path","dump","intepret","main","run","from","into","borrow","borrow_mut","try_from","try_into","type_id","fmt","from_args"],"q":["compile","","","","","","","","","","","","","",""],"d":["Compile lox code in a single pass","script path","output nicely formatted chunks","interpret the compiled bytecode","","","","","","","","","","",""],"i":[0,1,1,1,0,0,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[]],[[["bool",15]],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[],[["earlyexit",3],["result",4]]]],"p":[[3,"Args"]]},\
"interpret":{"doc":"","t":[3,12,5,5,11,11,11,11,11,11,11,11],"n":["Args","file_path","main","run","from","into","borrow","borrow_mut","try_from","try_into","type_id","from_args"],"q":["interpret","","","","","","","","","","",""],"d":["Interpret lox code from the AST","script path","","","","","","","","","",""],"i":[0,1,0,0,1,1,1,1,1,1,1,1],"f":[null,null,[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["result",4],["earlyexit",3]]]],"p":[[3,"Args"]]},\
"walox":{"doc":"The <code>lox</code> language.","t":[0,3,11,4,13,13,13,13,13,13,0,0,5,3,0,8,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,4,13,13,3,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,3,12,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,3,12,4,13,13,13,13,3,12,12,4,13,13,3,12,12,12,4,13,13,3,12,3,12,12,3,12,12,3,12,12,3,12,12,12,3,3,12,3,12,12,4,13,13,13,13,13,13,13,13,13,3,12,3,12,3,12,12,3,12,3,12,12,12,3,12,12,3,12,12,12,3,12,3,12,12,12,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,13,13,13,13,13,13,13,13,13,13,13,3,12,12,12,12,11,11,11,11,11,11,11,4,13,13,3,12,12,3,12,12,12,4,13,13,12,12,13,13,13,13,13,12,5,0,0,5,17,3,4,13,13,13,13,13,13,13,13,3,12,12,12,3,12,12,12,4,13,13,13,3,12,12,12,3,12,12,3,12,12,11,11,11,11,4,13,13,4,13,13,13,13,12,12,12,13,13,13,12,13,13,13,13,3,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,13,13,13,12,12,13,13,12,12,13,13,5,5,0,4,13,13,13,3,12,11,11,3,12,12,12,12,11,4,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,3,12,3,11,11,11,11,11,11,11,11,3,12,12,0,3,11,11,11,11,11,0,3,12,12,12,3,4,13,13,12,12,13,13,3,3,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,8,18,3,3,3,12,12,4,13,3,12,12,4,13,13,13,13,3,12,12,12,12,12,12,11,11,11,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18],"n":["analysis","AstValidator","validate","ValidationError","ThisUseOutsideMethod","ReturnOutsideFunction","ReturnInsideInitializer","InheritFromSelf","AlreadyDefinedVariable","SuperUseOutsideSubClass","ast","printer","print","Printer","visit","Visitor","Output","default_output","combine_output","combine_many_output","visit_statement","visit_print_stmnt","visit_expr_stmnt","visit_var_decl","visit_block_stmnt","visit_if_stmnt","visit_while_stmnt","visit_func_decl","visit_return_stmnt","visit_class_decl","visit_expr","visit_binary_expr","visit_grouping_expr","visit_literal_expr","visit_unary_expr","visit_logical_expr","visit_var_expr","visit_assign_expr","visit_call_expr","visit_get_expr","visit_set_expr","visit_this_expr","visit_super_expr","Visitable","super_visit_with","visit_with","ConversionError","Op","Literal","Expr","kind","span","ExprKind","Binary","Grouping","Literal","Unary","Logical","Var","Assign","Call","Get","Set","This","Super","BinaryExpr","left","operator","right","BinaryOpKind","Mult","Add","Sub","Div","And","Or","Equal","NotEqual","Greater","Less","GreaterEqual","LessEqual","GroupingExpr","inner","LiteralExpr","Boolean","Number","String","Null","UnaryExpr","operator","right","UnaryOpKind","Negate","Not","LogicalExpr","left","operator","right","LogicalOpKind","And","Or","VarExpr","name","AssignExpr","name","value","CallExpr","callee","arguments","GetExpr","object","property","SetExpr","object","property","value","ThisExpr","SuperExpr","method","Statement","span","kind","StatementKind","Expression","Print","Var","Block","If","While","Function","Return","Class","ExprStatement","expr","PrintStatement","expr","VarDeclaration","name","initializer","BlockStatement","statements","IfStatement","condition","then_branch","else_branch","WhileStatement","condition","body","FunctionDeclaration","name","parameters","body","ReturnStatement","value","ClassDeclaration","name","methods","superclass","compiler","and","binary","block_statement","declaration","expression","grouping","if_statement","literal","number","or","parse_precedence","print_statement","statement","string","unary","Precedence","None","Assignment","Or","And","Equality","Comparison","Term","Factor","Unary","Call","Primary","Compiler","cursor","current","locals","scope_depth","new","begin_scope","end_scope","is_global_scope","declare_variable","define_variable","resolve_variable","VariableRef","Global","Local","LocalVariable","depth","name","ParseRule","prefix_fn_impl","infix_fn_impl","precedence","CompilerError","MissingLiteral","UnexpectedToken","actual","expected","MissingToken","ScanError","ChunkError","InvalidAssignmentTarget","RedeclareLocalVariable","name","compile","interpreter","native_funcs","clock","DEFAULTS","Environment","Value","Boolean","Number","String","Null","NativeFunction","UserFunction","Class","Instance","NativeFunction","f","name","arity","UserFunction","declaration","closure","function_type","FunctionType","Function","Method","Initializer","Class","name","methods","superclass","Instance","class","fields","Interpreter","env","stdout","new","interpret","env","stdout","RuntimeControlFlow","Exception","Return","RuntimeException","InvalidOperationForType","UndefinedVariable","CalledNonFunctionType","MismatchedArity","callee_name","provided","expected","TopLevelReturn","AccessPropertyNonObject","AccessMissingField","field_name","SetPropertyNonObject","DefineBindingInFrozenEnvironment","NonClassSuperClass","MissingChildEnvironment","InvalidOperationForType","parser","expression","assignment","or","and","equality","comparison","addition","multiplication","unary","call","primary","declaration","var_declaration","statement","print_statement","return_statement","expr_statement","block","if_statement","while_statement","for_statement","function_declaration","class_declaration","ParseError","Scanning","OpConversion","InputRequired","failed_in","required","MissingLiteral","MisplacedToken","failed_in","token","MissingToken","InvalidAssignmentTarget","synchronize","parse","scanner","ScanError","UnexpectedChar","UnterminatedString","F64ParseFailure","Scanner","comments","new","scan_token","Token","type","literal","error","span","unwrap_identifier_name","Literal","Number","String","Identifier","TokenType","LeftParen","RightParen","LeftBrace","RightBrace","Comma","Dot","Minus","Plus","Semicolon","Slash","Star","Bang","BangEqual","Equal","EqualEqual","Greater","GreaterEqual","Less","LessEqual","Identifier","String","Number","And","Class","Else","False","Fun","For","If","Nil","Or","Print","Return","Super","This","True","Var","While","Error","keywords","length","TokenTryFromError","0","Cursor","new","peek","advance","check","advance_if","previous","consume","is_empty","MissingTokenError","msg","span","span","Span","dummy","new","envelop","line","range","vm","Chunk","line_numbers","instructions","constants","ChunkBuilder","ChunkError","Conversion","InsufficientRemainingData","expected","actual","MissingFinalReturn","IncompletePatches","ChunkIter","Instruction","op","arguments","OpCode","Constant","Nil","True","False","Equal","Greater","Less","Add","Subtract","Multiply","Divide","Not","Negate","Print","Pop","Return","GetGlobal","DefineGlobal","SetGlobal","GetLocal","SetLocal","JumpIfFalse","Jump","Loop","TryFromByteError","ConcreteObject","TYPE","Heap","Object","ObjectBase","obj_type","next_obj","ObjectType","String","StringObject","base","value","Value","Number","Nil","Bool","Object","VM","stack","chunk","stdout","ip","heap","globals","new","clear","interpret","RuntimeError","Validation","IncompatibleTypes","UndefinedVariable","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","default_output","combine_output","visit_class_decl","visit_func_decl","visit_return_stmnt","visit_this_expr","visit_super_expr","default_output","combine_output","visit_binary_expr","visit_grouping_expr","visit_literal_expr","visit_unary_expr","visit_logical_expr","visit_assign_expr","visit_var_expr","default_output","combine_output","visit_print_stmnt","visit_expr_stmnt","visit_var_decl","visit_block_stmnt","visit_if_stmnt","visit_while_stmnt","visit_func_decl","visit_return_stmnt","visit_class_decl","visit_binary_expr","visit_grouping_expr","visit_literal_expr","visit_unary_expr","visit_logical_expr","visit_var_expr","visit_assign_expr","visit_call_expr","visit_get_expr","visit_set_expr","visit_this_expr","visit_super_expr","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","super_visit_with","visit_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","cmp","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","eq","eq","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","try_from","try_from","try_from","try_from","try_from","try_from","fmt","fmt","fmt","fmt","source","source","source","source","source","source","symbol","symbol","symbol","VARIABLE_NAME","INITIALIZER_METHOD_NAME","next_highest","get_rule","global","new_child","define","assign","lookup","get_child","type","is_truthy","call","arity","call","bind","constructor","find_method","get","set","write_disassembled","iter","validate_instructions","decode_instruction_at","first_instruction_pointer","new","get_last_line","define_global_variable","jump_inst","complete_patch","prepare_loop","loop_inst","variable_inst","return_inst","constant_inst","constant_string_inst","simple_inst","build","read_u16_argument","write_u16_argument","u16_argument_to_bytes","JUMP_OP_ARGUMENT_SIZE","arguments_size","try_from_byte","try_from_byte_unchecked","is_falsey","is_object_type","to_object_type","type_str","new","clear","allocate_string","read","display_fmt","partial_eq","is","TYPE"],"q":["walox","walox::analysis","","","","","","","","","walox","walox::ast","walox::ast::printer","","walox::ast","walox::ast::visit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox","walox::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::compiler::CompilerError","","walox::compiler","","","","","walox::compiler::CompilerError","walox::compiler","walox","walox::interpreter","walox::interpreter::native_funcs","","walox::interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::interpreter::RuntimeException","","","walox::interpreter","","","walox::interpreter::RuntimeException","walox::interpreter","","","","","walox","walox::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::parser::ParseError","","walox::parser","","walox::parser::ParseError","","walox::parser","","","","walox","walox::scanner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox","walox::span","","","","","","walox","walox::vm","","","","","","","","walox::vm::ChunkError","","walox::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::analysis","","","","","","","","","","","","","","","","","","","walox::astwalox::ast::printer","","","","","","","walox::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::parser","","","","","","","","","","walox::scanner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::span","","","","","","","","","walox::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::analysis","","","","","","","walox::ast::printer","","","","","","","","","walox::interpreter","","","","","","","","","","","","","","","","","","","","","","","walox::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::compiler","","","walox::interpreter","","","","","","","","","","","","","walox::parser","","","walox::scanner","walox::vm","","","","","walox::scanner","walox::vm","walox::analysis","","walox::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::compiler","","walox::interpreter","","","","","","","","","","walox::parser","walox::scanner","","","","","","","walox::span","walox::vm","","","","","","","","","","walox::analysis","walox::compiler","walox::vm","walox::compiler","walox::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::compiler","","","walox::interpreter","","","","","","","","","","","","","","","","","","walox::parser","","walox::scanner","","","","","","","","","","","walox::span","","walox::vm","","","","","","","","","","","","","","","","","walox::compiler","walox::analysis","","walox::ast","","","","","","","","","","","","","","","","","","walox::ast::printer","walox::ast","","","","","","","","","","","walox::compiler","","","","walox::interpreter","","","","","","","","","","","walox::parser","walox::scanner","","","","","","","walox::span","walox::vm","","","","","","","","","","","","","walox::analysis","walox::ast","","","","","walox::compiler","walox::interpreter","","","","","","","walox::parser","walox::scanner","","","","walox::vm","","","","","","","walox::ast","","","walox::compiler","walox::scanner","","","walox::span","walox::vm","","","walox::ast","","","","walox::scanner","walox::vm","","","","","walox::compiler","walox::interpreter","walox::parser","walox::scanner","walox::vm","","walox::ast","","","","","walox::compiler","","walox::interpreter","","","","","","","","","","","","","","","","walox::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module contains static analysis tools for lox AST …","Traverse the AST and assert specific properties like no …","Perform checks on given AST chunk, returning errors that …","Types of errors that occur when traversing the complete …","Attempted to access the <code>this</code> variable outside of a class …","Attempted to <code>return</code> outside of a function","Attempted to <code>return</code> a value inside of a class <code>init</code> method","Attempted to have a class inherit from itself","Attempted to redefine a variable that already exists","Attempted to use <code>super</code> outside of a class that superclass","Abstract syntax tree definitions and utilities","An implementation of a <code>Visitor</code> which prints the structure …","Visit the given AST fragment and output its pretty …","The AST printer","Implementation of the visitor pattern for the AST data …","A type which traverses <code>Visitable</code> data","The type of output produced by this <code>Visitor</code>","The default value for this <code>Visitor</code>","Combine the output of 2 instances of visiting some data","Combine the output of multiple instances of visiting some …","","","","","","","","","","","","","","","","","","","","","","","","A type which is able to be traversed by a <code>Visitor</code>","Perform the default visiting of this piece of data","Visit the this piece of data with the given <code>Visitor</code>","Errors that occur when converting to AST elements","An error that occurs when converting from a raw <code>TokenType</code> …","An error that occurs when mapping token literals to …","Syntax tree of a lox expression","The type of expression","The continuous block of code this expression covers","Different types of expressions","A binary operation","Different types of binary operations","A literal value","A unary operation","A logical operation","A variable reference","An assignment to an existing variable","An expression that calls a function with the supplied …","An expression that access a named property on an object","An expression that sets the value of a named property on …","An expression that references the value of the instance …","An expression that acts as a property access on the …","A binary operation","The first argument to the operation","The type of binary operation","The second argument to the operation","Different types of binary operations","Multiplication operation, symbolized by <code>*</code>","Addition operation, symbolized by <code>+</code>","Subtraction operation, symbolized by <code>-</code>","Division operation, symbolized by <code>/</code>","Boolean AND operation, symbolized by <code>and</code>","Boolean OR operation, symbolized by <code>or</code>","Comparison equal operation, symbolized by <code>==</code>","Comparison not equal operation, symbolized by <code>!=</code>","Comparison greater than operation, symbolized by <code>></code>","Comparison less than operation, symbolized by <code><</code>","Comparison greater than or equal operation, symbolized by …","Comparison less than or equal operation, symbolized by <code><=</code>","An expression that is delimited by parentheses","The inner expression","A literal value","A boolean value","A numeric value","A string value (UTF-8)","A null value","A unary operation","The type of unary operation","The argument to the operation","Different types of unary operations","Negation operation, symbolized by <code>-</code>","Boolean not operation, symbolized by <code>!</code>,","A logical operation","The left operand of the operation","The type of logical operation","The right operand of the operation","Different types of logical operations","Logical AND operation, if the left and right operands are …","Logical OR operation, if the left or right operands is …","A variable reference expression","The name of the variable","An assignment to an existing variable","The name of the variable","The value of the assignment","An expression that calls a function with the supplied …","An expression that should evaluate to a function to call","The expressions that will be passed to the body of the …","An expression that access a named property on an object","An expression that evaluates to the object that will be …","The property name to access","An expression that sets the value of a named property on …","An expression that evaluates to the object that will be …","The name of the property","The value to set the property to","An expression that references the value of the instance …","An expression that acts as a property access on the …","The property that is being looked up on the superclass","Syntax tree of lox statements, the main elements of lox …","The continuous block of code this statement covers","The type of statement","Different types of statements","A statement consisting a single expression followed by a …","A print statement which outputs text to standard out","A var declaration defines and optionally initializes a …","A block statement contains a list of other statements and …","An if statement lets you conditionally execute statements","A while loop let you execute a statement multiple times …","A function declaration defines the arguments and body of …","A statement which immediately exits the containing …","A class declaration defines the methods of a new class …","A statement consisting a single expression followed by a …","The expression to be evaluated","A print statement which outputs text to standard out","The expression evaluated and printed","A var declaration defines and optionally initializes a …","The name of the variable binding","The initial value of the variable","A block statement contains a list of other statements and …","The statements that are present inside the block","An if statement lets you conditionally execute statements","The expression which decides which branch is taken","The statement representing the actions taken if the …","The statement representing the actions taken if the …","A while loop let you execute a statement multiple times …","The condition controls the execution of the while loop, …","The part of the while loop that gets executed multiple …","A function declaration defines the arguments and body of …","The name of the function","The names of the parameters to this function","The body of the function","A statement which immediately exits the containing …","The optional return value","A class declaration defines the methods of a new class …","The name of the class","The methods that belong to the class","The superclass, if there is one","Utilities for the single-pass compiler","Attempt to parse an “and” logical infix expression.","Attempt to compile a binary operation, having observed a …","Compile an block statement","Compile a declaration.","Compile an expression.","Attempt to compile a grouped expression, having already …","Attempt to compile an if statement","Attempt to compile a literal (boolean or nil) expression, …","Attempt to compile a numeric literal, having already …","Attempt to parse an “or” logical infix expression.","Parse the next token, dispatching to a more specific …","Attempt to compile a print statement.","Compile a statement.","Attempt to parse a string expression, having observed a …","Attempt to compile a unary operation, having already …","A relative measure of priority used while parsing.","Least precedence","Assignment expression, <code>x = 10</code>.","Logical or operation, <code>true or false</code>","Logical and operation, <code>true and false</code>","Equality comparison operation, <code>1 == 2</code> or <code>2 != 1</code>","Numeric comparison operation, <code>1 >= 2</code> or <code>2 < 1</code>","Addition or subtraction","Multiplication or division","Numeric or logical negation","Function call or property access","Highest precedence level","A single-pass compiler into <code>lox</code> bytecode.","The stream of token from the source code.","The chunk being built.","The set of local variables in scope","How many scopes deep the compiler currently is","Create a new compiler for the given source of tokens.","Start a new scope","End the current scope and emit instructions to clean up …","Returns <code>true</code> if the Compiler is in the context of a …","Declare a new variable in the current scope and prepare …","For an already declared variable in the current scope:","Search for a variable with the matching name.","A reference to a variable, either global or local.","A reference to a global variable, using the current chunk …","A reference to a local variable, using the <code>locals</code> array …","A record of a compiled local variable","The depth that this variable was recorded","The name of the variable","A rule for parsing in the case of a specific <code>TokenType</code>.","The function that will be used to parse a prefix instance …","The function that will be used to parse an infix instance …","The priority of this rule.","Errors that occur during the course of parsing and …","An error which occurs because a <code>Literal</code> was not present …","An error which occurs when encountering an unexpected …","The <code>TokenType</code> encountered in the stream.","The expected <code>TokenType</code> in a static message.","An error which occurs because a specific <code>TokenType</code> was …","An error which occurs because of something in the …","This error occurs because of a failure in the chunk …","Attempted to assign to an invalid piece of syntax","This error occurs when attempting to declare a variable …","The name of the existing variable.","Compile <code>lox</code> source","Tree-walking interpreter for the AST","Commonly used functions that the host environment …","A native function which takes no arguments and returns …","The default list of native functions","The set of bindings that are present in lexical scopes …","A lox value","A boolean value","A numeric value","A string value (UTF-8)","A null value","A callable value provided by the host environment","A callable value defined by the user","A class is an extensible collection of methods that is …","An instantiation of a class","A function that is defined by the interpreter","The underlying implementation of the native function","The name of the native function","The number of parameters of the native function","A user defined function","The content of the function: parameters + body.","The parent environment of this closure, contains all …","The type of user function","Different types of functions","A normal function","A method defined inside of a class","A method defined with the name <code>init</code>.","A class is an extensible collection of methods that is …","The name of the class","The methods defined on this class","The superclass of this class, if any","An instantiation of a class","The <code>Class</code> that this instance is derived from","The mapping from names to <code>Value</code>s for this instance","The AST interpreter","The environment, which holds the complete set of variable …","The standard out buffer, used to print things to screen","Create a new <code>Interpreter</code> with the default set of …","Visit the given AST fragments and evaluate them","Mutably access the environment of this <code>Interpreter</code>","Mutable access the stdout of this <code>Interpreter</code>","Errors that can occur during the course of interpretation","An exception immediately unwinds the interpreter, without …","A return immediately unwinds the interpreter to the …","Errors that can occur during the course of interpretation","An error that occurs when performing an operation between …","A variable lookup failed because the name is not bound","Attempted to call a non-function type failed","Attempted to a call a <code>Function</code> with too many or too few …","The function that attempted to call","The number of arguments provided","The number of arguments expected","Attempted to return without a containing function","Attempted to access a property on a <code>Value</code> that was not an …","Attempted to access a field which did not exist on the …","The property that was attempted access with","Attempted to set a property on a <code>Value</code> that was not an …","Attempted to define a new variable binding on a frozen …","Attempted to define a non-class value as superclass","Missing child environment on <code>super</code> lookup","An error that occurs when performing an operation between …","Parser implementation","Parse an expression","Parse an assignment expression","Parse an OR logical expression","Parse an AND logical expression","Parse an equality expression","Parse a comparison expression","Parse an addition or subtraction expression","Parse a multiplication or division expression","Parse a unary operation expression","Parse a function call expression","Parse a primary expression: a literal or a grouping …","Parse a declaration or fall through to a normal statement","Parse a variable declaraction","Parse a statement","Parse a print statement","Parse a return statement","Parse an expression statement","Parse a block of statements","Parse an if statement","Parse a while statement","Parse a for statement","Parse a function declaraction","Parse a class declaration","An error that can occur during the parsing process","The scanner produced some error while creating <code>Token</code>s","Converting from a <code>TokenType</code> to an <code>{Unary,Binary}OpKind</code> …","Parsing failed because the end of the token stream was …","The parse function that the error was produced in","The minimum number of tokens required, if known","An error which occurs because a <code>Literal</code> was not present …","An error which occurs because the token was unexpected in …","The parse function that the error was procued in","The token which was unexpected","An error produced by the <code>Cursor</code> when an expected <code>Token</code> is …","An error produced when the assignment target was illegal","Take the current state of the <code>Cursor</code> and attempt to …","Parse <code>lox</code> source","Tools for working with <code>lox</code> source code","Errors that can occur during the scanning process","An unexpected character was present in the input","A string literal did not have a closing <code>\\\"</code>","A failure occured while parsing a floating point number","The <code>Scanner</code> takes raw text input and produces a sequence …","The list of comments collected during scanning of source","Create a new <code>Scanner</code> for the given text","Consume the input and return the next <code>Token</code>, if it exists","A <code>Token</code> is an instance of a chunk of text with meaning, …","The type of token","The value of the token, if it is a <code>Literal</code>","The error from the token, if it is a <code>TokenType::Error</code>,","The <code>Span</code> that the token occupies in the source code","Unwrap the <code>Identifier</code> literal inner <code>String</code> value, …","A literal value embedded in the source code","A numeric value","A text value","A name","The <code>TokenType</code> represent the type of the chunks of text","<code>(</code>","<code>)</code>","<code>{</code>","<code>}</code>","<code>,</code>","<code>.</code>","<code>-</code>","<code>+</code>","<code>;</code>","<code>/</code>","<code>*</code>","<code>!</code>","<code>!=</code>","<code>=</code>","<code>==</code>","<code>></code>","<code>>=</code>","<code><</code>","<code><=</code>","An identifier is a name, such as <code>abc</code>, <code>a23</code>, <code>brownCowNow</code>","A piece of embedded text in the source, …","A numerical value, <code>123</code>, <code>1.234</code>, <code>0.0</code>","<code>and</code>","<code>class</code>","<code>else</code>","<code>false</code>","<code>fun</code>","<code>for</code>","<code>if</code>","<code>nil</code>","<code>or</code>","<code>print</code>","<code>return</code>","<code>super</code>","<code>this</code>","<code>true</code>","<code>var</code>","<code>while</code>","Error token, used to transmit error through <code>Token</code> iterator","Return the mapping from keyword strings to <code>TokenType</code>s.","Return the length of the token if it is known statically","An error that occurs when trying to convert from <code>u8</code> to …","","A struct which manages the state of the <code>Token</code> iterator …","Create a new <code>Cursor</code>","Look at the next token without advancing","Advance the token stream","Return true if the next token type matches the provided …","Advance the token stream, if the next token matches one …","Return a reference to the last <code>Token</code> that was produced, …","Advance the token stream if the next token matches the …","Return true if the token stream is empty","A <code>Cursor</code> expected a <code>TokenType</code> that was not found","The accompanying message to the error","The span of the expected token.","Common structures for reporting and selecting information …","A representation of a continuous block of source code","Create an empty <code>Span</code> on an illogical line","Create a new <code>Span</code> for the given line and source range","Create a <code>Span</code> which envelops all the provided sub-<code>Span</code>s","Return the line of this <code>Span</code>","Return the range covered by this <code>Span</code>","Virtual machine implementation","An immutable structure that contains compiled <code>Instruction</code>…","A run-length encoding of the line numbers for each byte …","The instructions data, filled with <code>OpCode</code>s and arguments.","The list of constants that are referenced by <code>Instruction</code>s …","A builder structure that represents a <code>Chunk</code> in the …","Errors that occur while iterating overing <code>Instruction</code>s.","Error converting a byte to a valid <code>OpCode</code>","Error when attempting to read <code>Instruction</code> arguments data, …","How many bytes were expected","How many bytes were actually in the buffer","A <code>Chunk</code> is not valid unless it has a <code>Opcode::Return</code> at …","The <code>ChunkBuilder</code> has incomplete patches, which means that …","An iterator over all the instructions in a <code>Chunk</code>.","An <code>Instruction</code> is the basic unit of execution in the lox …","The type of instruction","Extra data that is necessary to execute the instruction","Virtual machine instruction type","Load a constant onto the stack","Push a constant <code>Value::Nil</code> onto the stack.","Push a constant <code>Value::Bool(true)</code> onto the stack.","Push a constant <code>Value::Bool(false)</code> onto the stack.","Compare two <code>Value</code>s and return <code>true</code> if they are equal.","Compare two <code>Value::Number</code> and return <code>true</code> if the lhs is …","Compare two <code>Value::Number</code> and return <code>true</code> if the lhs is …","Add two <code>Value</code>s","Subtract two <code>Value</code>s","Multiple two <code>Value</code>s","Divide two <code>Value</code>s","Boolean inverse","Numeric inverse","Pop the top value off the stack and write it to stdout","Pop the top value off the stack and do nothing with it","Return from the current function","Read a global variable’s value","Define a global variable with an initial value","Write a new value to an existing global variable","Read a local variable","Set a local variable","Increment the <code>ip</code> variable if the top of the stack is …","Unconditionally increment the <code>ip</code> variable","Unconditionally decrement the <code>ip</code> variable","The error type returned when conversion from a byte to an …","This trait encompasses the behavior of all concrete …","The <code>ObjectType</code> of the <code>ConcreteObject</code>.","A memory region that contains <code>Value</code>s, separate from the …","An opaque object reference.","The base fields of all Objects","The type of Object that this base is a part of","The last allocated <code>Object</code> prior to this one, part of the …","The type of an Object","The type of an Object that contains immutable text data","An immutable String object","The base fields of the <code>StringObject</code>.","The string content","The value type of the virtual machine","Numeric value: <code>12300</code>, <code>-1.23004</code>, etc","<code>nil</code>","<code>true</code> or <code>false</code>","Any heap allocated value","The virtual machine that executions <code>Instructions</code>","The stack of <code>Value</code>s.","The currently executing chunk","The standard out buffer, used to print things to screen","Instruction pointer","The heap memory region, containing <code>Value</code>s separate from …","Current set of global variables","Create a new <code>VM</code> with the given output and code <code>Chunk</code>.","Reset all the state of the <code>VM</code>, deallocating some excess …","Safely execute the current <code>Chunk</code> to completion.","Errors that can occur during the execution of bytecode.","Error that occured while validating a chunk before …","Attempted an operation with incompatible types","Attempted to read a global variable which did not existeturn a static string which symbolizes this operation","Return a static string which symbolizes this operation","Return a static string which symbolizes this operation","The string value of the <code>this</code> variable.","The name of initializer methods","Produce the next highest <code>Precedence</code> level, saturating at …","Return the <code>ParseRule</code> for the specific <code>TokenType</code>.","Create a new global environment.","Create a new lexical environment that is a child of the …","Define a variable, shadowing any variable with the same …","Assign a new value to a variable, erroring if the …","Attempt to get the <code>Value</code> associated with the given …","Return a copy of a child environment.","The statically known type of the value","Return true if the value is “truthy”","Evaluate this <code>NativeFunction</code> with the provided arguments","Return the number of parameters of <code>UserFunction</code>.","Evaluate this <code>UserFunction</code> with the provided arguments and…","Create a new copy of the function that has the <code>this</code> …","Create an instance of this class","Search for a method of this <code>Class</code> that has the given name.","Access a property of this <code>Instance</code>","Set the value of a property on this <code>Instance</code>.","Write to the given output a specially formatted version …","Return an iterator over all the instructions contained in …","Validate the instruction in this chunk, returning <code>Ok(())</code> …","Attempt to decode an instruction at the given offset and …","Return a pointer to the first byte of instructions of …","Create a new <code>ChunkBuilder</code> with the given <code>Heap</code>.","Return the last line number or 0 if no line numbers exist","Create a new <code>String</code> value and write it to the constant …","Write a new jump instruction and return a new <code>Patch</code> …","Complete the given patch object by writing to the section …","Prepare a patch for a future <code>OpCode::Loop</code> instruction.","Write a new <code>OpCode::Loop</code> instruction that will jump back …","Write a new <code>OpCode::DefineGlobal</code>, <code>OpCode::GetGlobal</code>, or …","Write a new <code>OpCode::Return</code> instruction to the chunk.","Write a new <code>OpCode::Constant</code> instruction to the chunk.","Allocate a new constant <code>StringObject</code> and write a new …","Write a new simple (no extra data) instruction to the …","Consume this <code>ChunkBuilder</code> and return an immutable <code>Chunk</code>.","Attempt to read a u16 value in little endian format from …","Given a mutable buffer, write a u16 argument in the …","Given a u16 argument, convert it to bytes in little …","The number of bytes for the jump operation arguments.","Returns the number of bytes of extra information needed …","Attempt to onvert from a byte representation to the <code>OpCode</code>…","Convert from a byte representation to the <code>OpCode</code> enum.","Returns <code>true</code> if this <code>Value</code> is <code>false</code> or <code>false</code> equivalent.","Return <code>true</code> if this <code>Value</code> is an <code>Object</code> of the specific …","Return a reference to a concrete object, if this <code>Value</code> is …","The statically known type of the value","Create a new, empty <code>Heap</code>.","Reset the contents of the <code>Heap</code>, all <code>Objects</code> will be …","Allocate a new <code>StringObject</code> in the <code>Heap</code>.","Returns some reference to the value if it is of type T, …","Write to the formatter the representation that would …","Return <code>true</code> if this Object is equivalent to the given …","Return <code>true</code> if this Object is a reference to the <code>T</code> …","The <code>ObjectType</code> of the <code>ConcreteObject</code>."],"i":[0,0,1,0,2,2,2,2,2,2,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,0,5,5,0,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,0,10,0,11,11,11,11,0,12,12,0,13,13,0,14,14,14,0,15,15,0,16,0,17,17,0,18,18,0,19,19,0,20,20,20,0,0,21,0,22,22,0,23,23,23,23,23,23,23,23,23,0,24,0,25,0,26,26,0,27,0,28,28,28,0,29,29,0,30,30,30,0,31,0,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,0,35,35,0,36,36,0,37,37,37,0,38,38,39,39,38,38,38,38,38,40,0,0,0,0,0,0,0,41,41,41,41,41,41,41,41,0,42,42,42,0,43,43,43,0,44,44,44,0,45,45,45,0,46,46,0,47,47,47,47,47,47,0,48,48,0,49,49,49,49,50,50,50,49,49,49,51,49,49,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,52,53,53,52,52,54,54,52,52,0,0,0,0,55,55,55,0,56,56,56,0,57,57,57,57,57,0,58,58,58,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,60,0,61,61,61,61,61,61,61,61,0,62,62,0,0,63,63,63,63,63,0,0,64,64,64,0,0,65,65,66,66,65,65,0,0,67,67,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,69,0,0,0,70,70,0,71,0,72,72,0,73,73,73,73,0,74,74,74,74,74,74,74,74,74,0,75,75,75,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,76,76,76,76,76,76,76,76,76,21,21,21,21,21,21,21,21,21,77,77,77,77,77,77,77,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,78,78,78,78,78,78,78,78,78,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,79,79,79,79,79,79,79,79,79,79,52,52,52,52,52,52,52,52,52,52,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,80,80,80,80,80,80,80,80,65,65,65,65,65,65,65,65,65,65,81,81,81,81,81,81,81,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,82,82,82,82,82,82,82,82,82,82,73,73,73,73,73,73,73,73,73,73,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,72,72,72,72,72,72,72,72,72,72,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,1,1,1,1,1,1,1,77,77,77,77,77,77,77,77,77,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,6,6,8,8,10,10,11,11,12,12,14,14,16,16,17,17,18,18,19,19,20,20,76,76,21,21,22,22,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,7,7,7,7,7,7,7,7,7,7,7,7,23,23,23,23,23,23,23,23,23,38,38,38,41,41,41,41,41,41,41,41,41,48,48,49,49,52,52,52,55,65,73,73,73,75,56,80,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,76,21,22,23,24,25,26,27,28,29,30,31,32,33,38,78,41,42,43,44,45,46,48,49,79,52,55,57,58,59,60,61,62,63,65,67,68,82,73,84,71,70,72,75,1,33,83,33,5,5,6,6,7,7,8,8,9,10,10,11,11,12,12,13,14,14,15,16,16,17,17,18,18,19,19,20,20,76,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,38,38,78,41,41,42,42,43,43,44,45,45,46,46,48,48,49,49,79,79,52,52,55,55,57,57,58,58,59,60,60,62,62,63,63,64,64,65,65,67,67,68,82,82,73,73,84,71,72,72,75,75,33,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,76,21,77,22,23,24,25,26,27,28,29,30,31,32,33,35,36,38,78,41,42,43,44,45,46,47,48,49,79,52,55,57,58,59,60,61,62,63,64,65,81,67,68,82,73,83,84,71,70,72,75,2,5,9,11,13,15,38,41,42,43,45,46,49,79,52,55,58,60,62,65,68,82,73,84,72,75,9,13,15,33,59,60,62,63,67,68,71,9,11,13,15,59,68,68,68,68,68,38,49,52,55,65,75,9,13,15,76,32,33,33,78,78,78,78,78,78,41,41,42,43,43,43,45,45,46,46,64,64,64,64,64,81,81,81,81,81,81,81,81,81,81,81,81,81,67,67,67,68,68,68,68,73,73,73,73,83,83,83,84,84,84,84,69],"f":[null,null,[[],[["result",4],["validationerror",4]]],null,null,null,null,null,null,null,null,null,[[],["string",3]],null,null,null,null,[[]],[[]],[[["intoiterator",8]]],[[["statement",3]]],[[["printstatement",3]]],[[["exprstatement",3]]],[[["vardeclaration",3]]],[[["blockstatement",3]]],[[["ifstatement",3]]],[[["whilestatement",3]]],[[["functiondeclaration",3]]],[[["returnstatement",3]]],[[["classdeclaration",3]]],[[["expr",3]]],[[["binaryexpr",3]]],[[["groupingexpr",3]]],[[["literalexpr",4]]],[[["unaryexpr",3]]],[[["logicalexpr",3]]],[[["varexpr",3]]],[[["assignexpr",3]]],[[["callexpr",3]]],[[["getexpr",3]]],[[["setexpr",3]]],[[["thisexpr",3]]],[[["superexpr",3]]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15],["compiler",3]],[["compilererror",4],["result",4]]],[[["compiler",3],["bool",15]],[["compilererror",4],["result",4]]],[[["compiler",3]],[["compilererror",4],["result",4]]],[[["compiler",3]],[["compilererror",4],["result",4]]],[[["compiler",3]],[["compilererror",4],["result",4]]],[[["bool",15],["compiler",3]],[["compilererror",4],["result",4]]],[[["compiler",3]],[["compilererror",4],["result",4]]],[[["bool",15],["compiler",3]],[["compilererror",4],["result",4]]],[[["bool",15],["compiler",3]],[["compilererror",4],["result",4]]],[[["bool",15],["compiler",3]],[["compilererror",4],["result",4]]],[[["compiler",3],["precedence",4]],[["compilererror",4],["result",4]]],[[["compiler",3]],[["compilererror",4],["result",4]]],[[["compiler",3]],[["compilererror",4],["result",4]]],[[["bool",15],["compiler",3]],[["compilererror",4],["result",4]]],[[["bool",15],["compiler",3]],[["compilererror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["heap",3]]],[[]],[[]],[[],["bool",15]],[[["smolstr",3]],[["result",4],["compilererror",4],["variableref",4]]],[[["usize",15],["variableref",4]]],[[["smolstr",3]],["variableref",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["heap",3]],[["vec",3],["chunk",3],["result",4]]],null,null,[[],["nativefunction",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],[["runtimeexception",4],["result",4],["value",4]]],[[],["environment",3]],[[],["write",8]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["expr",3],["parseerror",4],["result",4]]],[[["cursor",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3],["token",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3],["token",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3]],[["result",4],["parseerror",4]]],[[["cursor",3],["token",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3],["token",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3],["token",3]],[["result",4],["parseerror",4],["statement",3]]],[[["cursor",3]],[["result",4],["parseerror",4]]],[[["cursor",3],["token",3]],[["result",4],["parseerror",4],["statement",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["cursor",3]]],[[],[["result",4],["vec",3],["vec",3]]],null,null,null,null,null,null,null,[[["str",15]]],[[],[["result",4],["option",4],["scanerror",4]]],null,null,null,null,null,[[],["smolstr",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["tokentype",4],["hashmap",3]]],[[],[["usize",15],["option",4]]],null,null,null,[[]],[[],[["token",3],["option",4]]],[[],[["option",4],["token",3]]],[[["tokentype",4]],["bool",15]],[[],[["option",4],["token",3]]],[[],[["token",3],["option",4]]],[[["tokentype",4],["str",15]],[["token",3],["missingtokenerror",3],["result",4]]],[[],["bool",15]],null,null,null,null,null,[[]],[[["u32",15]]],[[]],[[],["u32",15]],[[],["range",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chunk",3],["heap",3]]],[[]],[[],[["result",4],["runtimeerror",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["classdeclaration",3]]],[[["functiondeclaration",3]]],[[["returnstatement",3]]],[[["thisexpr",3]]],[[["superexpr",3]]],[[]],[[]],[[["binaryexpr",3]]],[[["groupingexpr",3]]],[[["literalexpr",4]]],[[["unaryexpr",3]]],[[["logicalexpr",3]]],[[["assignexpr",3]]],[[["varexpr",3]]],[[]],[[]],[[["printstatement",3]]],[[["exprstatement",3]]],[[["vardeclaration",3]]],[[["blockstatement",3]]],[[["ifstatement",3]]],[[["whilestatement",3]]],[[["functiondeclaration",3]]],[[["returnstatement",3]]],[[["classdeclaration",3]]],[[["binaryexpr",3]]],[[["groupingexpr",3]]],[[["literalexpr",4]]],[[["unaryexpr",3]]],[[["logicalexpr",3]]],[[["varexpr",3]]],[[["assignexpr",3]]],[[["callexpr",3]]],[[["getexpr",3]]],[[["setexpr",3]]],[[["thisexpr",3]]],[[["superexpr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["binaryexpr",3]]],[[["unaryexpr",3]]],[[["logicalexpr",3]]],[[["literalexpr",4]]],[[["groupingexpr",3]]],[[["varexpr",3]]],[[["assignexpr",3]]],[[["callexpr",3]]],[[["getexpr",3]]],[[["setexpr",3]]],[[["thisexpr",3]]],[[["superexpr",3]]],[[["exprstatement",3]]],[[["printstatement",3]]],[[["vardeclaration",3]]],[[["blockstatement",3]]],[[["ifstatement",3]]],[[["whilestatement",3]]],[[["functiondeclaration",3]]],[[["returnstatement",3]]],[[["classdeclaration",3]]],[[["missingtokenerror",3]]],[[["scanerror",4]]],[[["chunkerror",4]]],[[["literalexpr",4]]],[[["literalexpr",4]]],[[["bool",15]]],[[["f64",15]]],[[["smolstr",3]]],[[["instance",3],["arc",3]]],[[["class",3],["arc",3]]],[[["nativefunction",3]]],[[["userfunction",3]]],[[["value",4]]],[[["runtimeexception",4]]],[[["invalidoperationfortype",3]]],[[["runtimecontrolflow",4]]],[[["scanerror",4]]],[[["conversionerror",4]]],[[["missingtokenerror",3]]],[[["parsefloaterror",3]]],[[["tryfrombyteerror",3]]],[[["f64",15]]],[[["bool",15]]],[[["object",3]]],[[["chunkerror",4]]],[[],["option",4]],[[],["option",4]],[[],["astvalidator",3]],[[],["validationerror",4]],[[],["conversionerror",4]],[[],["expr",3]],[[],["exprkind",4]],[[],["binaryexpr",3]],[[],["binaryopkind",4]],[[],["groupingexpr",3]],[[],["literalexpr",4]],[[],["unaryexpr",3]],[[],["unaryopkind",4]],[[],["logicalexpr",3]],[[],["logicalopkind",4]],[[],["varexpr",3]],[[],["assignexpr",3]],[[],["callexpr",3]],[[],["getexpr",3]],[[],["setexpr",3]],[[],["thisexpr",3]],[[],["superexpr",3]],[[],["statement",3]],[[],["statementkind",4]],[[],["exprstatement",3]],[[],["printstatement",3]],[[],["vardeclaration",3]],[[],["blockstatement",3]],[[],["ifstatement",3]],[[],["whilestatement",3]],[[],["functiondeclaration",3]],[[],["returnstatement",3]],[[],["classdeclaration",3]],[[],["precedence",4]],[[],["compilererror",4]],[[],["environment",3]],[[],["value",4]],[[],["nativefunction",3]],[[],["userfunction",3]],[[],["functiontype",4]],[[],["class",3]],[[],["instance",3]],[[],["runtimecontrolflow",4]],[[],["runtimeexception",4]],[[],["invalidoperationfortype",3]],[[],["parseerror",4]],[[],["scanerror",4]],[[],["token",3]],[[],["literal",4]],[[],["tokentype",4]],[[],["tokentryfromerror",3]],[[],["cursor",3]],[[],["missingtokenerror",3]],[[],["span",3]],[[],["chunkerror",4]],[[],["instruction",3]],[[],["opcode",4]],[[],["tryfrombyteerror",3]],[[],["value",4]],[[],["object",3]],[[],["objecttype",4]],[[],["objectbase",3]],[[],["stringobject",3]],[[],["runtimeerror",4]],[[],["astvalidator",3]],[[]],[[]],[[["precedence",4]],["ordering",4]],[[["conversionerror",4]],["bool",15]],[[["conversionerror",4]],["bool",15]],[[["expr",3]],["bool",15]],[[["expr",3]],["bool",15]],[[["exprkind",4]],["bool",15]],[[["exprkind",4]],["bool",15]],[[["binaryexpr",3]],["bool",15]],[[["binaryexpr",3]],["bool",15]],[[["binaryopkind",4]],["bool",15]],[[["groupingexpr",3]],["bool",15]],[[["groupingexpr",3]],["bool",15]],[[["literalexpr",4]],["bool",15]],[[["literalexpr",4]],["bool",15]],[[["unaryexpr",3]],["bool",15]],[[["unaryexpr",3]],["bool",15]],[[["unaryopkind",4]],["bool",15]],[[["logicalexpr",3]],["bool",15]],[[["logicalexpr",3]],["bool",15]],[[["logicalopkind",4]],["bool",15]],[[["varexpr",3]],["bool",15]],[[["varexpr",3]],["bool",15]],[[["assignexpr",3]],["bool",15]],[[["assignexpr",3]],["bool",15]],[[["callexpr",3]],["bool",15]],[[["callexpr",3]],["bool",15]],[[["getexpr",3]],["bool",15]],[[["getexpr",3]],["bool",15]],[[["setexpr",3]],["bool",15]],[[["setexpr",3]],["bool",15]],[[["thisexpr",3]],["bool",15]],[[["superexpr",3]],["bool",15]],[[["superexpr",3]],["bool",15]],[[["statement",3]],["bool",15]],[[["statement",3]],["bool",15]],[[["statementkind",4]],["bool",15]],[[["statementkind",4]],["bool",15]],[[["exprstatement",3]],["bool",15]],[[["exprstatement",3]],["bool",15]],[[["printstatement",3]],["bool",15]],[[["printstatement",3]],["bool",15]],[[["vardeclaration",3]],["bool",15]],[[["vardeclaration",3]],["bool",15]],[[["blockstatement",3]],["bool",15]],[[["blockstatement",3]],["bool",15]],[[["ifstatement",3]],["bool",15]],[[["ifstatement",3]],["bool",15]],[[["whilestatement",3]],["bool",15]],[[["whilestatement",3]],["bool",15]],[[["functiondeclaration",3]],["bool",15]],[[["functiondeclaration",3]],["bool",15]],[[["returnstatement",3]],["bool",15]],[[["returnstatement",3]],["bool",15]],[[["classdeclaration",3]],["bool",15]],[[["classdeclaration",3]],["bool",15]],[[["precedence",4]],["bool",15]],[[["compilererror",4]],["bool",15]],[[["compilererror",4]],["bool",15]],[[],["bool",15]],[[["value",4]],["bool",15]],[[["value",4]],["bool",15]],[[["nativefunction",3]],["bool",15]],[[["nativefunction",3]],["bool",15]],[[["userfunction",3]],["bool",15]],[[["userfunction",3]],["bool",15]],[[["functiontype",4]],["bool",15]],[[["class",3]],["bool",15]],[[["class",3]],["bool",15]],[[["instance",3]],["bool",15]],[[["instance",3]],["bool",15]],[[["runtimecontrolflow",4]],["bool",15]],[[["runtimecontrolflow",4]],["bool",15]],[[["runtimeexception",4]],["bool",15]],[[["runtimeexception",4]],["bool",15]],[[["invalidoperationfortype",3]],["bool",15]],[[["invalidoperationfortype",3]],["bool",15]],[[["parseerror",4]],["bool",15]],[[["parseerror",4]],["bool",15]],[[["scanerror",4]],["bool",15]],[[["scanerror",4]],["bool",15]],[[["token",3]],["bool",15]],[[["token",3]],["bool",15]],[[["literal",4]],["bool",15]],[[["literal",4]],["bool",15]],[[["tokentype",4]],["bool",15]],[[["tokentryfromerror",3]],["bool",15]],[[["tokentryfromerror",3]],["bool",15]],[[["missingtokenerror",3]],["bool",15]],[[["missingtokenerror",3]],["bool",15]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[["chunk",3]],["bool",15]],[[["chunk",3]],["bool",15]],[[["chunkerror",4]],["bool",15]],[[["chunkerror",4]],["bool",15]],[[["instruction",3]],["bool",15]],[[["instruction",3]],["bool",15]],[[["opcode",4]],["bool",15]],[[["tryfrombyteerror",3]],["bool",15]],[[["tryfrombyteerror",3]],["bool",15]],[[["value",4]],["bool",15]],[[["value",4]],["bool",15]],[[],["bool",15]],[[["objecttype",4]],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["runtimeerror",4]],["bool",15]],[[["runtimeerror",4]],["bool",15]],[[["precedence",4]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokentype",4]],["result",4]],[[["literal",4]],["result",4]],[[["tokentype",4]],["result",4]],[[["tokentype",4]],["result",4]],[[["u8",15]],["result",4]],[[["u8",15]],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,[[]],[[["tokentype",4]],["parserule",3]],[[]],[[]],[[["value",4],["smolstr",3]]],[[["value",4],["str",15]],[["runtimeexception",4],["result",4]]],[[["str",15]],[["runtimeexception",4],["result",4],["value",4]]],[[["usize",15]],[["option",4],["environment",3]]],[[],["str",15]],[[],["bool",15]],[[["vec",3],["value",4]],[["runtimecontrolflow",4],["value",4],["result",4]]],[[],["usize",15]],[[["vec",3],["value",4],["interpreter",3]],[["runtimecontrolflow",4],["value",4],["result",4]]],[[["arc",3]],["userfunction",3]],[[["arc",3],["interpreter",3],["value",4],["vec",3]],[["runtimecontrolflow",4],["value",4],["result",4]]],[[["str",15]],[["option",4],["userfunction",3]]],[[["arc",3],["smolstr",3]],[["runtimecontrolflow",4],["value",4],["result",4]]],[[["smolstr",3],["value",4]]],[[["write",8],["option",4],["str",15]],["result",6]],[[],["chunkiter",3]],[[],[["result",4],["vec",3]]],[[["usize",15]]],[[]],[[["heap",3]]],[[],["usize",15]],[[],["u8",15]],[[["opcode",4],["usize",15]],["jumppatch",3]],[[["jumppatch",3]]],[[],["jumppatch",3]],[[["usize",15],["jumppatch",3]]],[[["opcode",4],["usize",15],["u8",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["opcode",4],["usize",15]]],[[],[["chunkerror",4],["chunk",3],["result",4]]],[[],[["tryfromsliceerror",3],["result",4],["u16",15]]],[[["u16",15]]],[[["u16",15]]],null,[[],["usize",15]],[[["u8",15]],[["result",4],["tryfrombyteerror",3]]],[[["u8",15]]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["str",15]],[[]],[[]],[[],["object",3]],[[],["option",4]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[],["bool",15]],null],"p":[[3,"AstValidator"],[4,"ValidationError"],[8,"Visitor"],[8,"Visitable"],[4,"ConversionError"],[3,"Expr"],[4,"ExprKind"],[3,"BinaryExpr"],[4,"BinaryOpKind"],[3,"GroupingExpr"],[4,"LiteralExpr"],[3,"UnaryExpr"],[4,"UnaryOpKind"],[3,"LogicalExpr"],[4,"LogicalOpKind"],[3,"VarExpr"],[3,"AssignExpr"],[3,"CallExpr"],[3,"GetExpr"],[3,"SetExpr"],[3,"SuperExpr"],[3,"Statement"],[4,"StatementKind"],[3,"ExprStatement"],[3,"PrintStatement"],[3,"VarDeclaration"],[3,"BlockStatement"],[3,"IfStatement"],[3,"WhileStatement"],[3,"FunctionDeclaration"],[3,"ReturnStatement"],[3,"ClassDeclaration"],[4,"Precedence"],[3,"Compiler"],[4,"VariableRef"],[3,"LocalVariable"],[3,"ParseRule"],[4,"CompilerError"],[13,"UnexpectedToken"],[13,"RedeclareLocalVariable"],[4,"Value"],[3,"NativeFunction"],[3,"UserFunction"],[4,"FunctionType"],[3,"Class"],[3,"Instance"],[3,"Interpreter"],[4,"RuntimeControlFlow"],[4,"RuntimeException"],[13,"MismatchedArity"],[13,"AccessMissingField"],[4,"ParseError"],[13,"InputRequired"],[13,"MisplacedToken"],[4,"ScanError"],[3,"Scanner"],[3,"Token"],[4,"Literal"],[4,"TokenType"],[3,"TokenTryFromError"],[3,"Cursor"],[3,"MissingTokenError"],[3,"Span"],[3,"Chunk"],[4,"ChunkError"],[13,"InsufficientRemainingData"],[3,"Instruction"],[4,"OpCode"],[8,"ConcreteObject"],[3,"ObjectBase"],[4,"ObjectType"],[3,"StringObject"],[4,"Value"],[3,"VM"],[4,"RuntimeError"],[3,"ThisExpr"],[3,"Printer"],[3,"Environment"],[3,"InvalidOperationForType"],[3,"ChunkIter"],[3,"ChunkBuilder"],[3,"TryFromByteError"],[3,"Heap"],[3,"Object"]]},\
"walox_test_util":{"doc":"Test utilities","t":[0,5,5,5,5,5,3,12,12,4,13,13,12,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["filecheck_helpers","create_filecheckers","execute_filecheck_tests","get_workspace_root","get_panic_message","output_test_outputs","TestOutput","name","result","TestResult","Ok","Error","reason","Test","Args","execute","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","fmt","fmt"],"q":["walox_test_util","walox_test_util::filecheck_helpers","","walox_test_util","","","","","","","","","walox_test_util::TestResult","walox_test_util","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Test helper methods that are specific to filecheck tests.","Create a pair of <code>Checker</code> objects that will check the …","Execute a suite of filecheck tests.","Ascending from the current directory, find the workspace …","Take an <code>Any</code> trait object and attempt to cast it to some …","Print a list of <code>TestOutput</code>s and a summary.","The result of a named test execution","The name of the test instance","The outcome of the test instance","The outcome of a test.","The test completed successfully","The test failed with a specific reason","The reason the test failed","A family of tests","The arguments, if any, to the tests","Run the test and return the result.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,0,2,2,3,0,4,4,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,2,1,2],"f":[null,[[["vec",3],["str",15]]],[[["str",15]],["result",6]],[[],[["pathbuf",3],["result",6]]],[[["any",8]],[["option",4],["str",15]]],[[["write",8]],["result",6]],null,null,null,null,null,null,null,null,null,[[],["testresult",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["testoutput",3]],[[],["testresult",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[3,"TestOutput"],[4,"TestResult"],[13,"Error"],[8,"Test"]]}\
}');
initSearch(searchIndex);